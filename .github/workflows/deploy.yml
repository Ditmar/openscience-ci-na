name: Deploy to AWS EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      WEB_APP:
        description: "WEBAPP image tag (seven first characters)"
        required: true
        default: ""
      STRAPI_APP:
        description: "STRAPI image tag (seven first characters)"
        required: true
        default: ""
      ENV:
        description: "Environment to deploy to (DEV or PROD)"
        required: true
        default: "DEV"
        type: choice
        options:
          - DEV
          - PROD

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Test SSH connection
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.AWS_SSH_HOST }}
          username: ${{ secrets.AWS_SSH_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "SSH connection successful"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set environment variables
        run: |
          echo "STRAPI_APP=${{ github.event.inputs.STRAPI_APP }}" >> $GITHUB_ENV
          echo "WEB_APP=${{ github.event.inputs.WEB_APP }}" >> $GITHUB_ENV
          echo "ENV=${{ github.event.inputs.ENV }}" >> $GITHUB_ENV
          if [ "${{ github.event.inputs.ENV }}" = "PROD" ]; then
            echo "NODE_ENV=production" >> $GITHUB_ENV
            echo "DEPLOY_FILE=deployment/prod/deploy.yml" >> $GITHUB_ENV
            echo "DATABASE_NAME=${{ secrets.DATABASE_NAME_PROD }}" >> $GITHUB_ENV
            echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME_PROD }}" >> $GITHUB_ENV
            echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD_PROD }}" >> $GITHUB_ENV
          else
            echo "NODE_ENV=development" >> $GITHUB_ENV
            echo "DEPLOY_FILE=deployment/dev/deploy.yml" >> $GITHUB_ENV
            echo "DATABASE_NAME=${{ secrets.DATABASE_NAME_DEV }}" >> $GITHUB_ENV
            echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME_DEV }}" >> $GITHUB_ENV
            echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD_DEV }}" >> $GITHUB_ENV
          fi
      - name: Debug SSH key
        run: echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}"
      - name: Copy Docker Compose file to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          source: ${{ env.DEPLOY_FILE }}
          target: "/home/${{ secrets.AWS_SSH_USER }}/deploy"
          host: ${{ secrets.AWS_SSH_HOST }}
          username: ${{ secrets.AWS_SSH_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          port: 22

      - name: Deploy with Docker Compose on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_SSH_HOST }}
          username: ${{ secrets.AWS_SSH_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd /home/${{ secrets.AWS_SSH_USER }}/deploy/deployment/${{env.NODE_ENV}}/
            docker-compose -f deploy.yml up -d
        env:
          STRAPI_APP: ${{ env.STRAPI_APP }}
          WEB_APP: ${{ env.WEB_APP }}
          NODE_ENV: ${{ env.NODE_ENV }}
          DATABASE_NAME: ${{ env.DATABASE_NAME }}
          DATABASE_USERNAME: ${{ env.DATABASE_USERNAME }}
          DATABASE_PASSWORD: ${{ env.DATABASE_PASSWORD }}

      - name: Clean up
        run: docker system prune -f
